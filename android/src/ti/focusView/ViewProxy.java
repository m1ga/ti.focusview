/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.focusView;

import android.animation.AnimatorSet;
import android.animation.ValueAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.view.View;
import android.view.animation.DecelerateInterpolator;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.TiDimension;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.view.TiUIView;


@Kroll.proxy(creatableInModule = FocusViewModule.class)
public class ViewProxy extends TiViewProxy {

    TiUIView view;
    PaintView paintView;
    View outerView;
    private int innerTop = 0;
    private int innerLeft = 0;
    private int innerWidth = 0;
    private int innerHeight = 0;
    private int borderRadius = 0;
    private double opacity = 1;
    private int radius = -1;

    public ViewProxy() {
        super();
    }

    @Override
    public TiUIView createView(Activity activity) {
        view = new FocusView(this);
        view.getLayoutParams().autoFillsHeight = true;
        view.getLayoutParams().autoFillsWidth = true;
        view.getNativeView().setOnClickListener(null);
        view.getNativeView().setClickable(false);
        return view;
    }

    @Override
    public void handleCreationDict(KrollDict options) {
        //super.handleCreationDict(options);

        if (options.containsKey(TiC.PROPERTY_WIDTH)) {
            innerWidth = options.getInt(TiC.PROPERTY_WIDTH);
        }
        if (options.containsKey(TiC.PROPERTY_HEIGHT)) {
            innerHeight = options.getInt(TiC.PROPERTY_HEIGHT);
        }
        if (options.containsKey(TiC.PROPERTY_LEFT)) {
            innerLeft = options.getInt(TiC.PROPERTY_LEFT);
        }
        if (options.containsKey(TiC.PROPERTY_TOP)) {
            innerTop = options.getInt(TiC.PROPERTY_TOP);
        }
        if (options.containsKey(TiC.PROPERTY_BORDER_RADIUS)) {
            borderRadius = options.getInt(TiC.PROPERTY_BORDER_RADIUS);
        }
        if (options.containsKey(TiC.PROPERTY_OPACITY)) {
            opacity = options.getDouble(TiC.PROPERTY_OPACITY);
        }

        if (options.containsKey("radius")) {
            radius = options.getInt("radius");
        }
    }


    @Kroll.method
    public void animateBox(KrollDict kd) {
        if (paintView != null) {
            paintView.animateBox(kd);
        }
    }

    @Kroll.setProperty
    public void top(int value) {
        innerTop = value;
    }

    @Kroll.setProperty
    public void left(int value) {
        innerLeft = value;
    }

    @Kroll.setProperty
    public void width(int value) {
        innerWidth = value;
    }

    @Kroll.setProperty
    public void height(int value) {
        innerHeight = value;
    }

    private class FocusView extends TiUIView {

        @SuppressLint("NewApi")
        public FocusView(TiViewProxy proxy) {
            super(proxy);

            outerView = this.getOuterView();

            TiDimension nativeValue = new TiDimension(innerWidth + "", TiDimension.TYPE_WIDTH);
            innerWidth = nativeValue.getAsPixels(outerView);

            nativeValue = new TiDimension(innerHeight + "", TiDimension.TYPE_HEIGHT);
            innerHeight = nativeValue.getAsPixels(outerView);

            nativeValue = new TiDimension(innerLeft + "", TiDimension.TYPE_LEFT);
            innerLeft = nativeValue.getAsPixels(outerView);

            nativeValue = new TiDimension(innerTop + "", TiDimension.TYPE_TOP);
            innerTop = nativeValue.getAsPixels(outerView);

            nativeValue = new TiDimension(borderRadius + "", TiDimension.TYPE_TOP);
            borderRadius = nativeValue.getAsPixels(outerView);

            if (radius != -1) {
                nativeValue = new TiDimension(radius + "", TiDimension.TYPE_TOP);
                radius = nativeValue.getAsPixels(outerView);
            }

            paintView = new PaintView(proxy.getActivity());
            paintView.setElevation(1000);
            paintView.setZ(10000);
            setNativeView(paintView);

        }
    }

    public class PaintView extends View {
        private final Paint tiPaint;
        private Path mPath;

        public PaintView(Context c) {
            super(c);
            tiPaint = new Paint(Paint.DITHER_FLAG);
            mPath = new Path();

            setLayerType(View.LAYER_TYPE_SOFTWARE, null);
        }

        public void animateBox(KrollDict kd) {

            AnimatorSet bouncer = new AnimatorSet();

            ValueAnimator animator = new ValueAnimator();
            if (kd.containsKeyAndNotNull("width")) {
                TiDimension nativeValue = new TiDimension(kd.getString("width"), TiDimension.TYPE_WIDTH);
                int newWidth = nativeValue.getAsPixels(outerView);
                animator.setIntValues(innerWidth, newWidth);
                animator.setInterpolator(new DecelerateInterpolator());
                animator.addUpdateListener(animation -> {
                    innerWidth = (int) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            ValueAnimator animator2 = new ValueAnimator();
            if (kd.containsKeyAndNotNull("height")) {
                TiDimension nativeValue = new TiDimension(kd.getString("height"), TiDimension.TYPE_HEIGHT);
                int newHeight = nativeValue.getAsPixels(outerView);
                animator2.setIntValues(innerHeight, newHeight);
                animator2.setInterpolator(new DecelerateInterpolator());
                animator2.addUpdateListener(animation -> {
                    innerHeight = (int) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            ValueAnimator animator3 = new ValueAnimator();
            if (kd.containsKeyAndNotNull("left")) {
                TiDimension nativeValue = new TiDimension(kd.getString("left"), TiDimension.TYPE_LEFT);
                int newLeft = nativeValue.getAsPixels(outerView);
                animator3.setIntValues(innerLeft, newLeft);
                animator3.setInterpolator(new DecelerateInterpolator());
                animator3.addUpdateListener(animation -> {
                    innerLeft = (int) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            ValueAnimator animator4 = new ValueAnimator();
            if (kd.containsKeyAndNotNull("top")) {
                TiDimension nativeValue = new TiDimension(kd.getString("top"), TiDimension.TYPE_TOP);
                int newTop = nativeValue.getAsPixels(outerView);
                animator4.setIntValues(innerTop, newTop);
                animator4.setInterpolator(new DecelerateInterpolator());
                animator4.addUpdateListener(animation -> {
                    innerTop = (int) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            ValueAnimator animator5 = new ValueAnimator();
            if (kd.containsKeyAndNotNull("opacity")) {
                float newOpacity = kd.getDouble("opacity").floatValue();
                animator5.setFloatValues((float) opacity, newOpacity);
                animator5.setInterpolator(new DecelerateInterpolator());
                animator5.addUpdateListener(animation -> {
                    opacity = (float) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            ValueAnimator animator6 = new ValueAnimator();
            if (kd.containsKeyAndNotNull("borderRadius")) {
                TiDimension nativeValue = new TiDimension(kd.getString("borderRadius"), TiDimension.TYPE_TOP);
                int newBorder = nativeValue.getAsPixels(outerView);
                animator6.setIntValues(borderRadius, newBorder);
                animator6.setInterpolator(new DecelerateInterpolator());
                animator6.addUpdateListener(animation -> {
                    borderRadius = (int) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            ValueAnimator animator7 = new ValueAnimator();
            if (kd.containsKeyAndNotNull("radius")) {
                TiDimension nativeValue = new TiDimension(kd.getString("radius"), TiDimension.TYPE_TOP);
                int newRadius = nativeValue.getAsPixels(outerView);
                animator7.setIntValues(radius, newRadius);
                animator7.setInterpolator(new DecelerateInterpolator());
                animator7.addUpdateListener(animation -> {
                    radius = (int) animation.getAnimatedValue();
                    paintView.invalidate();
                });
            }

            bouncer.setDuration(TiConvert.toInt(kd.getString("duration"), 1000));
            bouncer.playTogether(animator2, animator, animator4, animator5, animator3, animator6, animator7);
            bouncer.start();
        }


        @Override
        @SuppressLint("NewApi")
        protected void onDraw(Canvas canvas) {
            mPath = new Path();
            if (radius > -1) {
                mPath.addCircle(innerLeft, innerTop, radius, Path.Direction.CW);
            } else if (borderRadius > 0) {
                mPath.addRoundRect(innerLeft, innerTop, innerLeft + innerWidth, innerTop + innerHeight, borderRadius, borderRadius, Path.Direction.CW);
            } else {
                mPath.addRect(innerLeft, innerTop, innerLeft + innerWidth, innerTop + innerHeight, Path.Direction.CW);
            }
            mPath.setFillType(Path.FillType.INVERSE_EVEN_ODD);
            tiPaint.setColor(Color.BLACK);
            tiPaint.setAlpha((int) (opacity * 255));

            canvas.drawPath(mPath, tiPaint);
        }
    }

}
